# Pre-commit configuration for code quality enforcement
# Install with: pip install pre-commit && pre-commit install

repos:
  # General code formatting and cleanup
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        name: Remove trailing whitespace
      - id: end-of-file-fixer
        name: Ensure files end with newline
      - id: check-yaml
        name: Validate YAML files
        args: [--unsafe] # Allow custom YAML tags
      - id: check-json
        name: Validate JSON files

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: Format YAML/JSON files
        types_or: [yaml]
        args: [--write]

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
      - id: black
        name: Format Python code with Black
        language_version: python3
        args: [--line-length=88]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort Python imports
        args: [--profile=black, --line-length=88]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.1.1
    hooks:
      - id: flake8
        name: Lint Python code
        args:
          - --max-line-length=127
          - --max-complexity=10
          - --ignore=E203,W503,E501 # Black compatibility
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear
          - flake8-comprehensions

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.11.2
    hooks:
      - id: mypy
        name: Type check with mypy
        additional_dependencies:
          - types-requests
          - types-PyYAML
        args:
          - --ignore-missing-imports
          - --strict-optional
          - --warn-redundant-casts
          - --warn-unused-ignores
        files: ^custom_components/

  # Security linting
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.10
    hooks:
      - id: bandit
        name: Security check with Bandit
        args: [-c, pyproject.toml]
        additional_dependencies: ["bandit[toml]"]

  # Upgrade Python syntax
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.17.0
    hooks:
      - id: pyupgrade
        name: Upgrade Python syntax
        args: [--py311-plus]

  # Home Assistant specific checks
  - repo: local
    hooks:
      - id: homeassistant-manifest-check
        name: Validate Home Assistant manifest
        entry: python3
        language: system
        args:
          - -c
          - |
            import json
            import sys

            try:
                with open('custom_components/kubernetes/manifest.json', 'r') as f:
                    manifest = json.load(f)

                required_fields = ['domain', 'name', 'documentation', 'issue_tracker', 'version']
                for field in required_fields:
                    if field not in manifest:
                        print(f"❌ Missing required field in manifest.json: {field}")
                        sys.exit(1)

                # Check version format
                version = manifest['version']
                if not version.replace('.', '').replace('-', '').replace('rc', '').replace('beta', '').replace('alpha', '').isalnum():
                    print(f"❌ Invalid version format: {version}")
                    sys.exit(1)

                print("✅ Home Assistant manifest validation passed")
            except Exception as e:
                print(f"❌ Manifest validation failed: {e}")
                sys.exit(1)
        files: ^custom_components/kubernetes/manifest\.json$
        pass_filenames: false

      - id: python-import-check
        name: Check Python imports
        entry: python3
        language: system
        args:
          - -c
          - |
            import sys
            import ast
            import os

            def check_imports(filename):
                with open(filename, 'r') as f:
                    try:
                        tree = ast.parse(f.read())
                    except SyntaxError as e:
                        print(f"❌ Syntax error in {filename}: {e}")
                        return False

                for node in ast.walk(tree):
                    if isinstance(node, ast.ImportFrom) and node.module:
                        # Check for relative imports beyond component
                        if node.module.startswith('...'):
                            print(f"❌ Invalid relative import in {filename}: {node.module}")
                            return False

                        # Check for dangerous imports
                        dangerous = ['os', 'subprocess', 'sys']
                        if any(node.module.startswith(d) for d in dangerous):
                            print(f"⚠️ Potentially dangerous import in {filename}: {node.module}")

                return True

            all_good = True
            for root, dirs, files in os.walk('custom_components/kubernetes/'):
                for file in files:
                    if file.endswith('.py'):
                        filepath = os.path.join(root, file)
                        if not check_imports(filepath):
                            all_good = False

            if not all_good:
                sys.exit(1)
            print("✅ Python import validation passed")
        files: ^custom_components/.*\.py$
        pass_filenames: false

      - id: dependency-security-check
        name: Basic dependency security check
        entry: python3
        language: system
        args:
          - -c
          - |
            import subprocess
            import sys

            try:
                # Quick check for obviously dangerous package names
                result = subprocess.run([
                    sys.executable, '-m', 'pip', 'list', '--format=json'
                ], capture_output=True, text=True, check=True)

                # This is a basic check - the comprehensive scan runs in CI
                print("✅ Basic dependency check passed (full scan runs in CI)")

            except subprocess.CalledProcessError:
                print("⚠️ Could not check dependencies - will be verified in CI")
        pass_filenames: false
        stages: [pre-push] # Only run on push, not every commit

# Pre-commit configuration
default_language_version:
  python: python3.11

# Exclude patterns
exclude: |
  (?x)^(
    \.git/.*|
    \.pytest_cache/.*|
    __pycache__/.*|
    \.mypy_cache/.*|
    site/.*
  )$

# Fail fast - stop on first failure
fail_fast: false

# Default stages
default_stages: [pre-commit, pre-push]

# CI configuration
ci:
  # Skip these hooks in CI (they run in separate jobs)
  skip: [pip-audit, markdownlint]
  # Auto-fix pull requests
  autofix_prs: true
  # Auto-update configuration
  autoupdate_schedule: weekly
